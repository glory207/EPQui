#version 330 core

layout (triangles) in;
layout (triangle_strip, max_vertices = 150) out;

out float part; 
out vec4 color;
uniform vec3 camFr;
uniform vec3 camUp;
uniform vec3 camRight;
uniform vec3 camP;
vec3 ri;
vec3 fr;
vec3 up;
float dis ;
float dis2;
float size;
in DATA
{
    mat4 projection;
mat4 model;

} data_in[];

void draw()
{

   
	int cir = 3;
	float cire = cir;
	
	ri *= size;
	up *= size;
	


	for(int i = 0 ; i < cir ; i++)
	{
		
		gl_Position = data_in[0].projection *  data_in[0].model * (gl_in[0].gl_Position + vec4(fr * dis,0));
		EmitVertex();
		gl_Position = data_in[0].projection *  data_in[0].model * (gl_in[0].gl_Position + vec4(sin(radians(((i+1)/cire)*360.0)) * ri + cos(radians(((i+1)/cire)*360.0)) * up + fr * dis,0));
		EmitVertex(); 
		gl_Position = data_in[0].projection *  data_in[0].model * (gl_in[0].gl_Position + vec4(sin(radians((i/cire)*360.0)) * ri + cos(radians((i/cire)*360.0)) * up + fr * dis,0));
		EmitVertex();
		EndPrimitive();
	
		
		gl_Position = data_in[0].projection *  data_in[0].model * (gl_in[0].gl_Position + vec4(sin(radians((i/cire)*360.0)) * ri + cos(radians((i/cire)*360.0)) * up + fr * dis,0));
		EmitVertex();
		gl_Position = data_in[0].projection *  data_in[0].model * (gl_in[0].gl_Position + vec4(sin(radians(((i+1)/cire)*360.0)) * ri + cos(radians(((i+1)/cire)*360.0)) * up + fr * dis2,0));
		EmitVertex(); 
		gl_Position = data_in[0].projection *  data_in[0].model * (gl_in[0].gl_Position + vec4(sin(radians((i/cire)*360.0)) * ri + cos(radians((i/cire)*360.0)) * up + fr * dis2,0));
		EmitVertex();
		EndPrimitive();
	
		
		gl_Position = data_in[0].projection *  data_in[0].model * (gl_in[0].gl_Position + vec4(sin(radians(((i+1)/cire)*360.0)) * ri + cos(radians(((i+1)/cire)*360.0)) * up + fr * dis2,0));
		EmitVertex(); 
		gl_Position = data_in[0].projection *  data_in[0].model * (gl_in[0].gl_Position + vec4(sin(radians(((i+1)/cire)*360.0)) * ri + cos(radians(((i+1)/cire)*360.0)) * up + fr * dis,0));
		EmitVertex(); 
		gl_Position = data_in[0].projection *  data_in[0].model * (gl_in[0].gl_Position + vec4(sin(radians((i/cire)*360.0)) * ri + cos(radians((i/cire)*360.0)) * up + fr * dis,0));
		EmitVertex();
		EndPrimitive();
	
		gl_Position = data_in[0].projection *  data_in[0].model * (gl_in[0].gl_Position + vec4(fr * dis2,0));
		EmitVertex();
		gl_Position = data_in[0].projection *  data_in[0].model * (gl_in[0].gl_Position + vec4(sin(radians(((i+1)/cire)*360.0)) * ri + cos(radians(((i+1)/cire)*360.0)) * up + fr * dis2,0));
		EmitVertex(); 
		gl_Position = data_in[0].projection *  data_in[0].model * (gl_in[0].gl_Position + vec4(sin(radians((i/cire)*360.0)) * ri + cos(radians((i/cire)*360.0)) * up + fr * dis2,0));
		EmitVertex();
		EndPrimitive();
	}
}



void drawC(int sc)
{

	float dis = 0.5f;
   float size = dis + 0.1 * sc;
   float size2 = dis + 0.1 * (sc+1);
	int cir = 6;
	float cire = cir;

	for(int i = 0 ; i <= cir ; i++)
	{
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(sin(radians((i/cire)*360.0)) * ri + cos(radians((i/cire)*360.0)) * up,0) *size);
		EmitVertex(); 
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(sin(radians((i/cire)*360.0)) * ri + cos(radians((i/cire)*360.0)) * up,0) *size2);
		EmitVertex();
	}
	
		EndPrimitive();
}

void main()
{


	float ray_x = abs(dot(camFr, vec3(1.0,0.0,0.0))/length(camFr));
	float ray_y = abs(dot(camFr, vec3(0.0,1.0,0.0))/length(camFr));
	float ray_z = abs(dot(camFr, vec3(0.0,0.0,1.0))/length(camFr));
	dis = 0.2f;
	dis2 = 0.65f;
	size = 0.1f;
//	if(ray_z < 0.95f)
	{
part = 4;
	color = vec4(0,0,1,1);
    ri = vec3(1,0,0);
 fr = vec3(0,0,1);
    up = vec3(0,1,0);
   draw();
   }
//  if(ray_x < 0.95f)
  {
part = 5;
	color = vec4(1,0,0,1);
   ri = vec3(0,0,1);
   fr = vec3(1,0,0);
   up = vec3(0,1,0);
   draw();
   }
//   if(ray_y < 0.95f)
   {
part = 6;
	color = vec4(0,1,0,1);
   ri = vec3(0,0,1);
  fr = vec3(0,1,0);
   up = vec3(1,0,0);
	draw();
	}

	
part = 7;
	color = vec4(1,1,1,1);
   ri = camRight;
  fr = camFr;
   up = camUp;
	drawC(1);
}