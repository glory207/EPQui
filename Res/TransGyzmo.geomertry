#version 330 core

layout (triangles) in;
layout (triangle_strip, max_vertices = 150) out;

out float part; 
out vec4 color;
uniform vec3 camFr;
uniform vec3 camUp;
uniform vec3 camRight;
uniform vec3 camP;
vec3 ri;
vec3 fr;
vec3 up;
in DATA
{
    mat4 projection;
mat4 model;

} data_in[];

void draw()
{

   float size = 0.05f;
	int cir = 3;
	float cire = cir;
	float dis = 0.5f;
	ri *= size;
	up *= size;
	fr *= dis;

	for(int i = 0 ; i < cir ; i++)
	{
		
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position);
		EmitVertex();
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(sin(radians(((i+1)/cire)*360.0)) * ri + cos(radians(((i+1)/cire)*360.0)) * up,0));
		EmitVertex(); 
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(sin(radians((i/cire)*360.0)) * ri + cos(radians((i/cire)*360.0)) * up,0));
		EmitVertex();
		EndPrimitive();
	
		
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(sin(radians((i/cire)*360.0)) * ri + cos(radians((i/cire)*360.0)) * up,0));
		EmitVertex();
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(sin(radians(((i+1)/cire)*360.0)) * ri + cos(radians(((i+1)/cire)*360.0)) * up + fr,0));
		EmitVertex(); 
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(sin(radians((i/cire)*360.0)) * ri + cos(radians((i/cire)*360.0)) * up + fr,0));
		EmitVertex();
		EndPrimitive();
	
		
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(sin(radians(((i+1)/cire)*360.0)) * ri + cos(radians(((i+1)/cire)*360.0)) * up + fr,0));
		EmitVertex(); 
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(sin(radians(((i+1)/cire)*360.0)) * ri + cos(radians(((i+1)/cire)*360.0)) * up,0));
		EmitVertex(); 
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(sin(radians((i/cire)*360.0)) * ri + cos(radians((i/cire)*360.0)) * up,0));
		EmitVertex();
		EndPrimitive();
	
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(fr,0));
		EmitVertex();
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(sin(radians(((i+1)/cire)*360.0)) * ri + cos(radians(((i+1)/cire)*360.0)) * up + fr,0));
		EmitVertex(); 
		gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(sin(radians((i/cire)*360.0)) * ri + cos(radians((i/cire)*360.0)) * up + fr,0));
		EmitVertex();
		EndPrimitive();
	}
	


}

void draw2()
{
	float dis = 0.4f;
	float dis2 = 0.2f;
	gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(dis2 * ri + 0 * up + fr * dis2,0));
	EmitVertex();
	gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(dis * ri + 0 * up + fr * dis2,0));
	EmitVertex();
	gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(dis2 * ri + 0 * up + dis * fr,0));
	EmitVertex();
	gl_Position = data_in[0].projection * ( data_in[0].model * gl_in[0].gl_Position + vec4(dis * ri + 0 * up + dis * fr,0));
	EmitVertex();
	EndPrimitive();
}
void main()
{

    //float ndc_x = (2.0f * mouse_x) / SCR_WIDTH - 1.0f;
    //float ndc_y = 1.0f - (2.0f * mouse_y) / SCR_HEIGHT;
	//
    //Vector4 ray_ndc_4d = new Vector4(ndc_x, ndc_y, -1.0f, 1.0f);
    //Vector4 ray_view_4d = ProjectionInv * ray_ndc_4d;
	//
	//
    //Vector4 view_space_intersect = new Vector4(ray_view_4d.X, ray_view_4d.Y, -1, 1);
	//
    //Vector3 point_world = (camera.view * view_space_intersect).Xyz.Normalized();

	float ray_x = abs(dot(camFr, vec3(1.0,0.0,0.0))/length(camFr));
	float ray_y = abs(dot(camFr, vec3(0.0,1.0,0.0))/length(camFr));
	float ray_z = abs(dot(camFr, vec3(0.0,0.0,1.0))/length(camFr));


//	if(ray_z < 0.95f)
	{
part = 1;
	color = vec4(0,0,1,1);
    ri = vec3(1,0,0);
  fr = vec3(0,0,1);
    up = vec3(0,1,0);
   draw();
   }
 //  if(ray_x < 0.95f)
   {
part = 2;
	color = vec4(1,0,0,1);
   ri = vec3(0,0,1);
   fr = vec3(1,0,0);
   up = vec3(0,1,0);
   draw();
   }
//   if(ray_y < 0.95f)
   {
 part = 3;
 	color = vec4(0,1,0,1);
    ri = vec3(0,0,1);
   fr = vec3(0,1,0);
    up = vec3(1,0,0);
 	draw();
 	}


	
	//if(ray_z > 0.15f)
   {
	part = 12;
	color = vec4(0,0,1,1);
	fr = vec3(0,1,0);
	ri = vec3(1,0,0);
	up = vec3(0,0,1);
	draw2();
	}

	
	//if(ray_x > 0.15f)
   {
	part = 13;
	color = vec4(1,0,0,1);
	ri = vec3(0,1,0);
	up = vec3(1,0,0);
	fr = vec3(0,0,1);
	draw2();
	}

//	if(ray_y > 0.15f)
   {
	part = 14;
	color = vec4(0,1,0,1);
	up = vec3(0,1,0);
	fr = vec3(1,0,0);
	ri = vec3(0,0,1);
	draw2();
	}


}

