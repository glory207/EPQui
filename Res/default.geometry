#version 330 core

layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;

out vec3 norm;
out vec2 TPos;
out vec3 crntPos;
in DATA
{
	vec2 texCoord;
    mat4 projection;
} data_in[];


void main()
{
    vec3 vector0 = vec3(gl_in[1].gl_Position - gl_in[0].gl_Position);
    vec3 vector1 = vec3(gl_in[2].gl_Position - gl_in[0].gl_Position);
    vec3 surfaceNormal = normalize(cross(vector0, vector1));

    norm = (surfaceNormal);
    gl_Position = data_in[0].projection * (gl_in[0].gl_Position);
    crntPos = vec3(gl_in[0].gl_Position);
    TPos = data_in[0].texCoord;
    EmitVertex();

    norm = (surfaceNormal);
    gl_Position = data_in[1].projection * (gl_in[1].gl_Position);
    crntPos = vec3(gl_in[1].gl_Position);
    TPos = data_in[1].texCoord;
    EmitVertex();

    norm = (surfaceNormal);
    gl_Position = data_in[2].projection * (gl_in[2].gl_Position);
    crntPos = vec3(gl_in[2].gl_Position);
    TPos = data_in[2].texCoord;
    EmitVertex();

    EndPrimitive();
}